# This Evennia workflow will install Python dependencies, run tests with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: test-suite

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - "docs/**"
  pull_request:
    branches: [main, develop]

jobs:
  test-sqlite:
    name: TestSqlite
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        include:
          - python-version: "3.10"
            coverage-test: true

    timeout-minutes: 35

    env:
      UNIT_TEST_SETTINGS: "--settings=settings --keepdb --timing"
      COVERAGE_TEST_SETTINGS: "--settings=settings --timing"

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          cache-dependency-path: |
            pyproject.toml

      - name: Install package dependencies
        run: |
          python -m pip install --upgrade pip
          pip install wheel
          pip install coveralls
          pip install tblib
          pip install .
          pip install .[extra]

      - name: Initialize evennia
        run: |
          evennia --init testing_mygame
          cp .github/workflows/sqlite3_settings.py testing_mygame/server/conf/settings.py
          cd testing_mygame
          evennia migrate
          evennia collectstatic --noinput

      # For non-coverage tests, run them in parallel.
      - name: Run test suite
        if: ${{ ! matrix.coverage-test }}
        working-directory: testing_mygame
        run: |
          evennia test ${{ env.UNIT_TEST_SETTINGS }} evennia

      # OBS - it's important to not run the coverage tests with --parallel, it messes up the coverage
      # calculation!
      - name: Run test suite with coverage
        if: ${{ matrix.coverage-test }}
        working-directory: testing_mygame
        run: |
          coverage run --rcfile=../pyproject.toml ../bin/unix/evennia test ${{ env.COVERAGE_TEST_SETTINGS }} evennia
          coverage combine
          coverage xml
          coverage --version
          coverage report | grep TOTAL

      # we only want to run coverall once, so we only do it for the designated matrix combination(s)
      # it's also not critical if pushing to either service fails (happens for PRs since env is not
      # available outside of the evennia org)
      - name: Send data to Coveralls
        if: ${{ matrix.coverage-test && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop') }}
        continue-on-error: true
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
        run: |
          cd testing_mygame
          coveralls

  test-psql:
    name: TestPostgres
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        python-version: [ "3.10", "3.11", "3.12"]

    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:13.14-alpine3.19
        # Provide the password for postgres
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --name postgres

    timeout-minutes: 35

    env:
      UNIT_TEST_SETTINGS: "--settings=settings --keepdb"

    steps:
      - uses: actions/checkout@v4

      - name: Set postgres params to Non-Durable
        run: |
          docker exec -i postgres bash << EOF
            sed -i -e 's/fsync = on/fsync = off/' /var/lib/postgresql/data/postgresql.conf
            sed -i -e 's/synchronous_commit = on/synchronous_commit = off/' /var/lib/postgresql/data/postgresql.conf
            sed -i -e 's/full_page_writes = on/full_page_writes = off/' /var/lib/postgresql/data/postgresql.conf
          EOF

      - name: Restart postgres to apply changes
        run: docker restart --time 0 postgres

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          cache-dependency-path: |
            pyproject.toml

      - name: Install package dependencies
        run: |
          python -m pip install --upgrade pip
          pip install wheel
          pip install "psycopg[binary]"
          pip install tblib
          pip install .
          pip install .[extra]

      - name: Initialize evennia
        run: |
          evennia --init testing_mygame
          cp .github/workflows/postgresql_settings.py testing_mygame/server/conf/settings.py
          cd testing_mygame
          evennia migrate
          evennia collectstatic --noinput

      # For non-coverage tests, run them in parallel.
      - name: Run test suite
        working-directory: testing_mygame
        run: |
          evennia test ${{ env.UNIT_TEST_SETTINGS }} evennia

  test-mysql:
    name: TestMySQL
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.10", "3.11" ]

    timeout-minutes: 35

    env:
      UNIT_TEST_SETTINGS: "--settings=settings --keepdb --timing"
      COVERAGE_TEST_SETTINGS: "--settings=settings --timing"

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          cache-dependency-path: |
            pyproject.toml

      - name: Set up database (mysql)
        uses: ./.github/actions/setup-database
        with:
          database: mysql
        timeout-minutes: 5

      - name: Install package dependencies
        run: |
          python -m pip install --upgrade pip
          pip install wheel
          pip install mysqlclient
          pip install tblib
          pip install .
          pip install .[extra]

      - name: Initialize evennia
        run: |
          evennia --init testing_mygame
          cp .github/workflows/mysql_settings.py testing_mygame/server/conf/settings.py
          cd testing_mygame
          evennia migrate
          evennia collectstatic --noinput

      # For non-coverage tests, run them in parallel.
      - name: Run test suite
        working-directory: testing_mygame
        run: |
          evennia test ${{ env.UNIT_TEST_SETTINGS }} evennia

  deploy:
    name: Deploy Docker Image
    needs: test-sqlite
    runs-on: ubuntu-latest
    if: ${{ github.repository == 'evennia/evennia' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop') }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push for main
        if: ${{ github.ref == 'refs/heads/main' }}
        id: docker_build_main
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: evennia/evennia:latest

      - name: Build and push for develop
        if: ${{ github.ref == 'refs/heads/develop' }}
        id: docker_build_develop
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: evennia/evennia:develop
